{"version":3,"sources":["webpack:///./src/media/compose.ts","webpack:///./src/media/middleware/base.ts","webpack:///./src/utils/http.ts","webpack:///./src/media/middleware/subreddit.ts","webpack:///./src/media/middleware/youtube.ts","webpack:///./src/media/middleware/youtube-playlist.ts","webpack:///./src/media/middleware/httpHead.ts","webpack:///./src/media/middleware/media.ts","webpack:///./src/media/middleware/html.ts","webpack:///./src/media/middleware/og.js","webpack:///./src/media/middleware/openGraph.ts","webpack:///./src/media/middleware/oembed.ts","webpack:///./src/media/middleware/autoplay.ts","webpack:///./src/media/middleware/microdata.ts","webpack:///./src/media/middleware/imgur.ts","webpack:///./src/media/error.ts","webpack:///./src/media/middleware/preventDownload.ts","webpack:///./src/media/index.ts"],"names":["media_compose","middleware","Array","isArray","TypeError","mware","match","resolve","ctx","index","dispatch","i","Promise","reject","Error","req","url","err","base","origin","location","[object Object]","next","transformList","Set","prefixHeaders","headers","Object","keys","forEach","name","has","toLowerCase","fetchId","mainFetch","options","startsWith","URL","e","credentials","requestId","handler","event","data","type","window","removeEventListener","resp","payload","addEventListener","postMessage","fetchText","async","body","URL_PATTERN","transformPost","result","id","title","subreddit","xpost","crosspost_parent_list","media","length","parent","getListing","after","urlobj","url_url","paramObj","query","limit","params","utils_url","apiUrl","protocol","hostname","pathname","json","Referer","http","getNextPosts","children","filter","post","stickied","map","isSubreddit","exec","href","isCommentThread","includes","state","reddit","reqState","redditUrl","currentIdx","idx","console","log","error","debug","posts","child","res","hasMore","item","reddit_video","v","duration","oembed","parseItem","youtube_URL_PATTERN","VIDEO_ID_PATTERNS","YouTubeClient","this","instance","youtube","getInstance","getVideoId","metadata","$","isoDuration","attr","metaBroadcast","metaBroadcastEndDate","utils","undefined","metaDescription","description","searchParams","getScrapedMetadata","message","referrer","oEmbed","youtube_playlist_URL_PATTERN","youtube_playlist","isYouTube","isPlaylist","Boolean","ytpl","text","trim","rawLen","split","len","parseInt","isNaN","embedUrl","delete","rawIndex","get","set","toString","httpHead","response","fetchResponse","method","user-agent","referer","httpHeadFailed","code","status","server","contentType","val","shift","getContentTypeToken","getTypeToken","responseCode","disableGooglebot","MIME_MEDIA_TYPES","middleware_media","meta","path_browserify","buildMediaMetadata","middleware_html","host","cheerio","fieldsArray","multiple","property","fieldName","mediaMapperTwitterImage","width","height","alt","mediaMapperTwitterPlayer","stream","mediaMapper","str","parseFloat","mediaSorter","a","b","aRes","aExt","bRes","bExt","Math","max","BAD_VIDEO_TYPES","IGNORE_VIDEO_HOSTNAMES","buildHTMLMetadata","og","ogImageFallback","ogObject","key","attribs","content","push","ogImage","ogImageSecureURL","ogImageURL","ogImageWidth","twitterImageHeight","ogImageType","ogImageHeight","ogImages","zip","sort","ogVideo","ogVideoWidth","ogVideoHeight","ogVideoType","ogVideoDuration","ogVideoSecureURL","videoDuration","ogVideos","twitterImageSrc","twitterImage","twitterImageWidth","twitterImageAlt","twitterImages","twitterPlayer","twitterPlayerWidth","twitterPlayerHeight","twitterPlayerStream","twitterPlayers","allMedia","onlyGetOpenGraphInfo","ogTitle","ogDescription","supportedImageExts","each","elem","indexOf","pop","parse","image","thumbnails","0","useVideo","videoUrl","openGraph","WORDPRESS_OEMBED_PATH","oEmbedJson","link","test","fetchOEmbed","info","html","src","parseOembedUrl","setQueryTrue","prop","autoplay","endsWith","urlObj","search","setAutoplay","microdata","metaDuration","lib","imgur","imageSrc","MediaRequestError","super","setPrototypeOf","prototype","preventDownload","headResponseHeaders","contentDisp","__webpack_require__","d","__webpack_exports__","resolveMediaUrl","resolveMediaPlaylist","middlewares","createContext","user","finalizeMedia","desc","object","fn"],"mappings":"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","file":"3.app.prod.js","sourcesContent":["import {\n  IMediaMiddleware,\n  IMediaRequest,\n  IMediaResponse,\n  IMediaMiddlewareResolve,\n  IMediaContext\n} from './types'\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\nfunction compose(middleware: IMediaMiddleware[]) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const mware of middleware) {\n    if (typeof mware.match !== 'function' || typeof mware.resolve !== 'function') {\n      throw new TypeError('Middleware must be composed of functions!')\n    }\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n  return function(ctx: IMediaContext) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch(i: number): PromiseLike<IMediaResponse | void> {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let mware: IMediaMiddleware | undefined = middleware[i]\n      if (!mware) return Promise.resolve()\n\n      if (!mware.match(ctx.req.url, ctx)) {\n        return Promise.resolve(dispatch(i + 1))\n      }\n\n      try {\n        return Promise.resolve<any>(\n          mware.resolve(ctx, function next() {\n            return dispatch(i + 1)\n          })\n        )\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n\nexport default compose\n","import { IMediaMiddleware } from '../types'\nimport { APP_WEBSITE } from '../../constants/http'\n\nconst mware: IMediaMiddleware = {\n  match({ origin }) {\n    return origin === location.origin\n  },\n\n  resolve(ctx, next) {\n    throw new Error('Unable to request Metastream app link')\n  }\n}\n\nexport default mware\n","import { CoreOptions, RequestResponse } from 'request'\n\ntype FetchResponse = Response & {\n  body: any\n  headers: { [key: string]: string }\n}\n\ninterface FetchOptions extends RequestInit {\n  timeout?: number\n}\n\nconst transformList = new Set(['user-agent', 'referer'])\nconst prefixHeaders = (headers: any) => {\n  if (typeof headers === 'object') {\n    headers = { ...headers }\n    // Prefix reserved headers to be fixed in the extension background script\n    Object.keys(headers).forEach(name => {\n      if (transformList.has(name.toLowerCase())) {\n        headers[`X-Metastream-${name}`] = headers[name]\n      }\n    })\n  }\n  return headers\n}\n\nlet fetchId = 0\nconst mainFetch = (url: string, options: FetchOptions = {}): Promise<FetchResponse> => {\n  return new Promise((resolve, reject) => {\n    if (url.startsWith('//')) {\n      url = `https:${url}`\n    }\n\n    try {\n      new URL(url)\n    } catch (e) {\n      reject(e)\n      return\n    }\n\n    options = {\n      credentials: 'omit', // ignore cookies\n      ...options,\n      headers: prefixHeaders(options.headers)\n    }\n\n    const requestId = fetchId++\n\n    const handler = (event: MessageEvent) => {\n      const { data } = event\n      if (typeof data !== 'object') return\n      if (data.type !== `metastream-fetch-response${requestId}`) return\n\n      window.removeEventListener('message', handler, false)\n\n      const { err, resp } = data.payload\n\n      if (err) {\n        reject(err)\n        return\n      }\n\n      resolve(resp)\n    }\n\n    window.addEventListener('message', handler, false)\n    window.postMessage(\n      { type: 'metastream-fetch', payload: { requestId, url, options } },\n      location.origin\n    )\n  })\n}\n\nexport const fetchText = async <T = string>(\n  url: string,\n  options?: RequestInit\n): Promise<[T, FetchResponse]> => {\n  const resp = await mainFetch(url, options)\n  return [resp.body, resp]\n}\n\nexport const fetchResponse = async (url: string, options?: RequestInit): Promise<FetchResponse> => {\n  const resp = await mainFetch(url, options)\n  return resp\n}\n","import { parse } from 'url'\nimport { encodeQueryParams } from 'utils/url'\nimport { IMediaMiddleware, MediaType, IMediaContext } from '../types'\nimport { fetchText } from 'utils/http'\nimport { MEDIA_REFERRER } from 'constants/http'\n\n// https://www.reddit.com/dev/api/\n\nconst enum ObjectType {\n  Comment = 't1',\n  Account = 't2',\n  Link = 't3',\n  Message = 't4',\n  Subreddit = 't5',\n  Award = 't6'\n}\n\nconst URL_PATTERN = /reddit\\.com\\/r\\/([^\\s/]+)\\/?/i\nconst API_LIMIT = 5\n\nconst transformPost = ({ data }: any) => {\n  let result: any = {\n    id: data.id,\n    url: data.url,\n    title: `${data.title} - /r/${data.subreddit}`\n  }\n\n  const xpost = data.crosspost_parent_list\n\n  // TODO: secure_media_embed\n  if (data.media) {\n    result.media = data.media\n  }\n\n  if (xpost && xpost.length > 0) {\n    const parent = xpost[0]\n\n    if (parent.url) {\n      result.url = parent.url\n    }\n\n    if (parent.media) {\n      result.media = parent.media\n    }\n  }\n\n  return result\n}\n\nconst getListing = async (url: string, after?: string) => {\n  const urlobj = parse(url, true)\n\n  const paramObj: { [key: string]: string | number } = {\n    ...urlobj.query,\n    limit: API_LIMIT\n  }\n\n  if (after) {\n    paramObj.after = after\n  }\n\n  const params = encodeQueryParams(paramObj)\n\n  // TODO: Keep GET params for filtering\n  // TODO: Pick up from previous playlist state\n  const apiUrl = `${urlobj.protocol}//${urlobj.hostname}${urlobj.pathname}.json?${params}`\n\n  const [json] = await fetchText<any>(apiUrl, {\n    headers: {\n      Referer: MEDIA_REFERRER\n    }\n  })\n\n  return json\n}\n\nconst getNextPosts = (json: any) => {\n  const posts = (json.data.children as any[]).filter(post => !post.data.stickied).map(transformPost)\n  return posts\n}\n\nconst parseItem = (ctx: IMediaContext, item: any): any => {\n  ctx.res.title = item.title\n\n  // Overwrite request url with subreddit post\n  const url = new URL(item.url)\n  if (url && url.href) {\n    ctx.req.url = url\n  }\n\n  const { media } = item\n  if (media) {\n    if (media.reddit_video) {\n      const v = media.reddit_video\n\n      if (url && url.href) ctx.res.url = url.href\n\n      const duration = v.duration * 1000\n      if (duration) ctx.res.duration = duration\n\n      return true\n    } else if (media.oembed) {\n      // Defer parse to oembed middleware\n      // ctx.state.oEmbedJson = media.oembed\n      return false\n    }\n  }\n\n  return false\n}\n\nconst mware: IMediaMiddleware = {\n  match(url, ctx) {\n    const isSubreddit = !!URL_PATTERN.exec(url.href)\n    const isCommentThread = url.pathname ? url.pathname.includes('/comments/') : false\n    return (isSubreddit && !isCommentThread) || !!(ctx.req.state && ctx.req.state.reddit)\n  },\n\n  async resolve(ctx, next) {\n    const reqState = ctx.req.state\n\n    let redditUrl\n    let children: any[]\n    let after\n    let currentIdx\n\n    // TODO: filter for API listings (/hot, /new, etc.)\n    // https://www.reddit.com/dev/api/#section_listings\n    if (reqState && reqState.reddit) {\n      redditUrl = reqState.reddit.href\n      children = reqState.reddit.children\n      after = reqState.reddit.after\n      currentIdx = reqState.reddit.idx\n    } else {\n      redditUrl = ctx.req.url.href\n      const json = await getListing(redditUrl)\n      console.log('Subreddit JSON', json)\n\n      if (json.error) {\n        console.debug('Error fetching subreddit posts')\n        return next()\n      }\n\n      const posts = getNextPosts(json)\n\n      if (posts.length === 0) {\n        return next()\n      }\n\n      children = posts\n      after = json.data.after\n      currentIdx = -1\n    }\n\n    let idx = currentIdx + 1\n    let child = children[idx]\n\n    if (!child) {\n      const json = await getListing(reqState!.reddit.href, reqState!.reddit.after)\n      const posts = getNextPosts(json)\n\n      if (posts.length === 0) {\n        return next()\n      }\n\n      idx = 0\n      children = posts\n      child = children[idx]\n      after = json.data.after\n\n      if (!child) {\n        return\n      }\n    }\n\n    // Save pagination info for resolving next playlist item\n    ctx.res.type = MediaType.Playlist\n    ctx.res.hasMore = true\n    ctx.res.state = {\n      ...ctx.res.state,\n      reddit: {\n        ...(reqState || {}).reddit,\n        href: redditUrl,\n        idx,\n        children,\n        after\n      }\n    }\n\n    if (!parseItem(ctx, child)) {\n      await next()\n\n      let title = child.title || ctx.res.title\n      ctx.res.title = title\n      return ctx.res\n    }\n  }\n}\n\nexport default mware\n","import { IMediaMiddleware, IMediaResponse } from '../types'\nimport { mergeMetadata, parseHtmlDescription, parseISO8601 } from '../utils'\n\nconst URL_PATTERN = /youtu\\.?be(?:.com)?/i\n\n// TODO: https://www.youtube.com/attribution_link?a=ShEHdkiTDq4&u=%2Fwatch%3Fv%3Dm-6zjXLPRHg%26feature%3Dshare\nconst VIDEO_ID_PATTERNS = [\n  /youtu\\.be\\/([^#\\&\\?]{11})/, // youtu.be/<id>\n  /\\?v=([^#\\&\\?]{11})/, // ?v=<id>\n  /\\&v=([^#\\&\\?]{11})/, // &v=<id>\n  /embed\\/([^#\\&\\?]{11})/, // embed/<id>\n  /\\/v\\/([^#\\&\\?]{11})/ // /v/<id>\n]\n\nclass YouTubeClient {\n  static getInstance(): YouTubeClient {\n    if (!this.instance) {\n      this.instance = new YouTubeClient()\n    }\n    return this.instance\n  }\n\n  private static instance: YouTubeClient\n\n  getVideoId(url: string): string | null {\n    let match\n\n    for (let i = 0; i < VIDEO_ID_PATTERNS.length; i++) {\n      match = VIDEO_ID_PATTERNS[i].exec(url)\n      if (match) {\n        break\n      }\n    }\n\n    return match ? match[1] : null\n  }\n}\n\nasync function getScrapedMetadata(url: URL, $: CheerioStatic): Promise<Partial<IMediaResponse>> {\n  const metaDuration = $('meta[itemprop=duration]')\n  const isoDuration = metaDuration.attr('content')\n\n  const metaBroadcast = $('meta[itemprop=isLiveBroadcast]')\n  const metaBroadcastEndDate = $('meta[itemprop=endDate]')\n  const isLiveBroadcast =\n    (metaBroadcast.attr('content') || '').toLowerCase() === 'true' && !metaBroadcastEndDate\n\n  let duration\n\n  if (isLiveBroadcast) {\n    duration = 0\n  } else {\n    duration = isoDuration ? parseISO8601(isoDuration) * 1000 : undefined\n  }\n\n  const metaDescription = $('#eow-description')\n  const description =\n    metaDescription.length === 1 ? parseHtmlDescription(metaDescription) : undefined\n\n  if (url.searchParams.has('t')) {\n    // TODO: parse '1h2m3s' format\n    // startTime = parseHms(query.t)\n  }\n\n  return {\n    duration,\n    description\n  }\n}\n\nconst mware: IMediaMiddleware = {\n  match(url) {\n    const { hostname = '', href = '' } = url\n    return !!URL_PATTERN.exec(hostname) && !!YouTubeClient.getInstance().getVideoId(href)\n  },\n\n  async resolve(ctx, next) {\n    let metadata\n\n    try {\n      metadata = await getScrapedMetadata(ctx.req.url, ctx.state.$!)\n    } catch (e) {\n      console.error('YouTube request failed', e.message)\n      return next()\n    }\n\n    mergeMetadata(ctx.res, metadata)\n\n    // Bypass restricted embed playback\n    ctx.res.state.referrer = true\n\n    // Disable oEmbed for playlists\n    ctx.state.oEmbed = false\n\n    return next()\n  }\n}\n\nexport default mware\n","import { IMediaMiddleware } from '../types'\n\nconst URL_PATTERN = /youtu\\.?be(?:.com)?/i\n\ninterface IYouTubePlaylistState {\n  title: string\n  index: number\n  length: number\n}\n\nconst mware: IMediaMiddleware = {\n  match(url, ctx) {\n    const isYouTube = !!URL_PATTERN.exec(url.href)\n    const isPlaylist = url.searchParams.has('list')\n    return (isYouTube && isPlaylist) || Boolean(ctx.req.state && ctx.req.state.ytpl)\n  },\n\n  async resolve(ctx, next) {\n    const { state } = ctx.req\n    const ytpl: IYouTubePlaylistState = (state && state.ytpl) || {}\n\n    const isInitialRequest = typeof ytpl.index === 'undefined'\n\n    if (isInitialRequest) {\n      await next()\n\n      const { res } = ctx\n\n      const { body, $ } = ctx.state\n      if (!body || !$) return\n\n      const title = $('.playlist-title').text() || res.title\n      ytpl.title = (title || 'YouTube Playlist').trim()\n\n      const rawLen = $('#playlist-length')\n        .text()\n        .split(' ')[0]\n      const len = parseInt(rawLen, 10)\n      if (isNaN(len)) {\n        // private playlist\n        // try to remove playlist params from embed\n        try {\n          const embedUrl = new URL(ctx.res.url)\n          embedUrl.searchParams.delete('list')\n          ctx.res.url = embedUrl.href\n        } catch {}\n\n        return ctx.res\n      }\n\n      ytpl.length = len\n\n      const rawIndex = $('li.currently-playing').data('index')\n      const params = ctx.req.url.searchParams\n      const index = rawIndex || params.get('index') || '0'\n      ytpl.index = parseInt(index, 10) || 0\n\n      ctx.res.state.ytpl = ytpl\n    } else {\n      ytpl.index++\n\n      const url = ctx.req.url\n      url.pathname = '/embed/videoseries'\n      url.searchParams.set('index', `${ytpl.index}`)\n      ctx.res.url = url.toString()\n    }\n\n    let { index, length, title } = ytpl\n\n    ctx.res.title = title\n    ctx.res.state = { ...ctx.req.state, ytpl, referrer: true }\n    ctx.res.hasMore = index < length - 1\n\n    return ctx.res\n  }\n}\n\nexport default mware\n","import { IMediaMiddleware } from '../types'\nimport { fetchResponse } from 'utils/http'\nimport { MEDIA_USER_AGENT } from 'constants/http'\n\nconst getContentTypeToken = (val?: string | string[]) => {\n  val = Array.isArray(val) ? val[0] : val\n  val = (val && val.split(';').shift()) || ''\n  return val.trim()\n}\n\n/** https://www.w3.org/Protocols/rfc1341/4_Content-Type.html */\nconst getTypeToken = (val?: string) => (val ? (val.split('/').shift() || '').toLowerCase() : '')\n\nconst mware: IMediaMiddleware = {\n  match({ protocol }: URL) {\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  async resolve(ctx, next) {\n    const { url } = ctx.req\n\n    // Request HEAD response to check MIME type\n    let response\n\n    try {\n      response = await fetchResponse(url.href, {\n        method: 'HEAD',\n        headers: {\n          'user-agent': MEDIA_USER_AGENT,\n          referer: url.href // prevent hotlink blocking\n        }\n      })\n    } catch {\n      ctx.state.httpHeadFailed = true\n      return next()\n    }\n\n    const code = response.status || 200\n\n    const server = response.headers['server']\n    const contentType = getContentTypeToken(response.headers['content-type'])\n    const type = getTypeToken(contentType)\n\n    ctx.state.responseCode = code\n    ctx.state.contentType = contentType\n    ctx.state.type = type\n\n    // #244: Cloudflare validates agents using the Googlebot UA\n    ctx.state.disableGooglebot = server === 'cloudflare'\n\n    return next()\n  }\n}\n\nexport default mware\n","import { Url } from 'url'\nimport { basename } from 'path'\n\nimport { IMediaMiddleware, IMediaResponse } from '../types'\n\nconst MIME_MEDIA_TYPES = new Set(['audio', 'image', 'video'])\n\nfunction buildMediaMetadata(url: URL): Partial<IMediaResponse> {\n  // TODO: get ID3 metadata from MP3s\n  return {\n    url: url.href!,\n    title: basename(url.pathname || url.href!)\n  }\n}\n\nconst mware: IMediaMiddleware = {\n  match({ protocol }) {\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  resolve({ req, res, state }, next) {\n    const { url } = req\n    const { type } = state\n\n    // Avoid GET requests to media\n    if (type && MIME_MEDIA_TYPES.has(type)) {\n      const meta = buildMediaMetadata(url)\n      res.url = meta.url || res.url\n      res.title = res.title || meta.title\n      return res\n    }\n\n    return next()\n  }\n}\n\nexport default mware\n","import { load } from 'cheerio'\nimport { IMediaMiddleware } from '../types'\nimport { fetchText } from 'utils/http'\nimport { MEDIA_USER_AGENT } from 'constants/http'\n\nconst mware: IMediaMiddleware = {\n  match({ protocol }) {\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  async resolve(ctx, next) {\n    const { url } = ctx.req\n\n    // Skip if HEAD request fails to avoid fetching huge blobs of data\n    if (ctx.state.httpHeadFailed) {\n      return next()\n    }\n\n    let text\n\n    try {\n      const result = await fetchText(url.href, {\n        headers: ctx.state.disableGooglebot\n          ? {}\n          : {\n              'user-agent': MEDIA_USER_AGENT,\n              host: url.host\n            }\n      })\n      text = result[0]\n    } catch {\n      return next()\n    }\n\n    ctx.state.body = text\n    const $ = (ctx.state.$ = load(text))\n\n    // prettier-ignore\n    ctx.res.title = $('title').text().trim() || ctx.res.title\n\n    return next()\n  }\n}\n\nexport default mware\n","import { load } from 'cheerio'\nimport { zip } from 'lodash-es'\n\nconst fieldsArray = [\n  {\n    multiple: false,\n    property: 'og:title',\n    fieldName: 'ogTitle'\n  },\n  {\n    multiple: false,\n    property: 'og:type',\n    fieldName: 'ogType'\n  },\n  {\n    multiple: true,\n    property: 'og:image',\n    fieldName: 'ogImage'\n  },\n  {\n    multiple: true,\n    property: 'og:image:url',\n    fieldName: 'ogImageURL'\n  },\n  {\n    multiple: true,\n    property: 'og:image:secure_url',\n    fieldName: 'ogImageSecureURL'\n  },\n  {\n    multiple: true,\n    property: 'og:image:width',\n    fieldName: 'ogImageWidth'\n  },\n  {\n    multiple: true,\n    property: 'og:image:height',\n    fieldName: 'ogImageHeight'\n  },\n  {\n    multiple: true,\n    property: 'og:image:type',\n    fieldName: 'ogImageType'\n  },\n  {\n    multiple: false,\n    property: 'og:url',\n    fieldName: 'ogUrl'\n  },\n  {\n    multiple: false,\n    property: 'og:audio',\n    fieldName: 'ogAudio'\n  },\n  {\n    multiple: false,\n    property: 'og:audio:url',\n    fieldName: 'ogAudioURL'\n  },\n  {\n    multiple: false,\n    property: 'og:audio:secure_url',\n    fieldName: 'ogAudioSecureURL'\n  },\n  {\n    multiple: false,\n    property: 'og:audio:type',\n    fieldName: 'ogAudioType'\n  },\n  {\n    multiple: false,\n    property: 'og:description',\n    fieldName: 'ogDescription'\n  },\n  {\n    multiple: false,\n    property: 'og:determiner',\n    fieldName: 'ogDeterminer'\n  },\n  {\n    multiple: false,\n    property: 'og:locale',\n    fieldName: 'ogLocale'\n  },\n  {\n    multiple: false,\n    property: 'og:locale:alternate',\n    fieldName: 'ogLocaleAlternate'\n  },\n  {\n    multiple: false,\n    property: 'og:site_name',\n    fieldName: 'ogSiteName'\n  },\n  {\n    multiple: true,\n    property: 'og:video',\n    fieldName: 'ogVideo'\n  },\n  {\n    multiple: true,\n    property: 'og:video:url', // An alternative to 'og:video'\n    fieldName: 'ogVideo'\n  },\n  {\n    multiple: true,\n    property: 'og:video:secure_url',\n    fieldName: 'ogVideoSecureURL'\n  },\n  {\n    multiple: true,\n    property: 'og:video:width',\n    fieldName: 'ogVideoWidth'\n  },\n  {\n    multiple: true,\n    property: 'og:video:height',\n    fieldName: 'ogVideoHeight'\n  },\n  {\n    multiple: true,\n    property: 'og:video:type',\n    fieldName: 'ogVideoType'\n  },\n  // This format is wrong, but was seen on vk.com\n  {\n    multiple: true,\n    property: 'og:video:duration',\n    fieldName: 'ogVideoDuration'\n  },\n  {\n    multiple: true,\n    property: 'video:duration',\n    fieldName: 'videoDuration'\n  },\n  {\n    multiple: false,\n    property: 'twitter:card',\n    fieldName: 'twitterCard'\n  },\n  {\n    multiple: false,\n    property: 'twitter:site',\n    fieldName: 'twitterSite'\n  },\n  {\n    multiple: false,\n    property: 'twitter:site:id',\n    fieldName: 'twitterSiteId'\n  },\n  {\n    multiple: false,\n    property: 'twitter:creator',\n    fieldName: 'twitterCreator'\n  },\n  {\n    multiple: false,\n    property: 'twitter:creator:id',\n    fieldName: 'twitterCreatorId'\n  },\n  {\n    multiple: false,\n    property: 'twitter:title',\n    fieldName: 'twitterTitle'\n  },\n  {\n    multiple: false,\n    property: 'twitter:description',\n    fieldName: 'twitterDescription'\n  },\n  {\n    multiple: true,\n    property: 'twitter:image',\n    fieldName: 'twitterImage'\n  },\n  {\n    multiple: true,\n    property: 'twitter:image:height',\n    fieldName: 'twitterImageHeight'\n  },\n  {\n    multiple: true,\n    property: 'twitter:image:width',\n    fieldName: 'twitterImageWidth'\n  },\n  {\n    multiple: true,\n    property: 'twitter:image:src',\n    fieldName: 'twitterImageSrc'\n  },\n  {\n    multiple: true,\n    property: 'twitter:image:alt',\n    fieldName: 'twitterImageAlt'\n  },\n  {\n    multiple: true,\n    property: 'twitter:player',\n    fieldName: 'twitterPlayer'\n  },\n  {\n    multiple: true,\n    property: 'twitter:player:width',\n    fieldName: 'twitterPlayerWidth'\n  },\n  {\n    multiple: true,\n    property: 'twitter:player:height',\n    fieldName: 'twitterPlayerHeight'\n  },\n  {\n    multiple: true,\n    property: 'twitter:player:stream',\n    fieldName: 'twitterPlayerStream'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:name:iphone',\n    fieldName: 'twitterAppNameiPhone'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:id:iphone',\n    fieldName: 'twitterAppIdiPhone'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:url:iphone',\n    fieldName: 'twitterAppUrliPhone'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:name:ipad',\n    fieldName: 'twitterAppNameiPad'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:id:ipad',\n    fieldName: 'twitterAppIdiPad'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:url:ipad',\n    fieldName: 'twitterAppUrliPad'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:name:googleplay',\n    fieldName: 'twitterAppNameGooglePlay'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:id:googleplay',\n    fieldName: 'twitterAppIdGooglePlay'\n  },\n  {\n    multiple: false,\n    property: 'twitter:app:url:googleplay',\n    fieldName: 'twitterAppUrlGooglePlay'\n  }\n]\n\nvar parseNumbers = function(str) {\n  if (!isNaN(str)) {\n    str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str)\n  }\n  return str\n}\n\nvar mediaMapperTwitterImage = function(item) {\n  return {\n    url: item[0],\n    width: item[1],\n    height: item[2],\n    alt: item[3]\n  }\n}\n\nvar mediaMapperTwitterPlayer = function(item) {\n  return {\n    url: item[0],\n    width: item[1],\n    height: item[2],\n    stream: item[3]\n  }\n}\n\nvar mediaMapper = function(item) {\n  return {\n    url: item[0],\n    width: item[1],\n    height: item[2],\n    type: item[3],\n    duration: parseNumbers(item[4])\n  }\n}\n\nvar mediaSorter = function(a, b) {\n  if (!(a.url && b.url)) {\n    return 0\n  }\n\n  var aRes = a.url.match(/\\.(\\w{2,5})$/),\n    aExt = (aRes && aRes[1].toLowerCase()) || null\n  var bRes = b.url.match(/\\.(\\w{2,5})$/),\n    bExt = (bRes && bRes[1].toLowerCase()) || null\n\n  if (aExt === 'gif' && bExt !== 'gif') {\n    return -1\n  } else if (aExt !== 'gif' && bExt === 'gif') {\n    return 1\n  } else {\n    return Math.max(b.width, b.height) - Math.max(a.width, a.height)\n  }\n}\n\n/*\n * getOG - scrape that url!\n * @param string url - the url we want to scrape\n * @param function callback\n */\nexport function parse(body, options) {\n  const ogImageFallback = options.ogImageFallback === undefined ? true : options.ogImageFallback\n\n  let $ = load(body),\n    meta = $('meta'),\n    keys = Object.keys(meta)\n\n  let ogObject = {}\n\n  keys.forEach(function(key) {\n    if (!(meta[key].attribs && (meta[key].attribs.property || meta[key].attribs.name))) {\n      return\n    }\n    var property = meta[key].attribs.property || meta[key].attribs.name,\n      content = meta[key].attribs.content\n    fieldsArray.forEach(function(item) {\n      if (property === item.property) {\n        if (!item.multiple) {\n          ogObject[item.fieldName] = content\n        } else if (!ogObject[item.fieldName]) {\n          ogObject[item.fieldName] = [content]\n        } else if (Array.isArray(ogObject[item.fieldName])) {\n          ogObject[item.fieldName].push(content)\n        }\n      }\n    })\n  })\n\n  // set the ogImage or fallback to ogImageURL or ogImageSecureURL\n  ogObject.ogImage = ogObject.ogImageSecureURL\n    ? ogObject.ogImageSecureURL\n    : ogObject.ogImage\n    ? ogObject.ogImage\n    : ogObject.ogImageURL\n    ? ogObject.ogImageURL\n    : []\n  if (!ogObject.ogImage || !ogObject.ogImage.length) {\n    delete ogObject['ogImage']\n  }\n\n  /* Combine image/width/height/type\n      and sort for priority */\n  if (\n    ogObject.ogImage ||\n    ogObject.ogImageWidth ||\n    ogObject.twitterImageHeight ||\n    ogObject.ogImageType\n  ) {\n    ogObject.ogImage = ogObject.ogImage ? ogObject.ogImage : [null]\n    ogObject.ogImageWidth = ogObject.ogImageWidth ? ogObject.ogImageWidth : [null]\n    ogObject.ogImageHeight = ogObject.ogImageHeight ? ogObject.ogImageHeight : [null]\n    ogObject.ogImageType = ogObject.ogImageType ? ogObject.ogImageType : [null]\n  }\n  var ogImages = zip(\n    ogObject.ogImage,\n    ogObject.ogImageWidth,\n    ogObject.ogImageHeight,\n    ogObject.ogImageType\n  )\n    .map(mediaMapper)\n    .sort(mediaSorter)\n\n  /* Combine video/width/height/type\n      and sort for priority */\n  if (\n    ogObject.ogVideo ||\n    ogObject.ogVideoWidth ||\n    ogObject.ogVideoHeight ||\n    ogObject.ogVideoType ||\n    ogObject.ogVideoDuration\n  ) {\n    ogObject.ogVideo = ogObject.ogVideo ? ogObject.ogVideo : [null]\n    ogObject.ogVideo = ogObject.ogVideoSecureURL ? ogObject.ogVideoSecureURL : ogObject.ogVideo\n    ogObject.ogVideoWidth = ogObject.ogVideoWidth ? ogObject.ogVideoWidth : [null]\n    ogObject.ogVideoHeight = ogObject.ogVideoHeight ? ogObject.ogVideoHeight : [null]\n    ogObject.ogVideoType = ogObject.ogVideoType ? ogObject.ogVideoType : [null]\n    ogObject.ogVideoDuration = ogObject.videoDuration || ogObject.ogVideoDuration || [null]\n  }\n  var ogVideos = zip(\n    ogObject.ogVideo,\n    ogObject.ogVideoWidth,\n    ogObject.ogVideoHeight,\n    ogObject.ogVideoType,\n    ogObject.ogVideoDuration\n  )\n    .map(mediaMapper)\n    .sort(mediaSorter)\n\n  /* Combine twitter image/width/height/alt\n      and sort for priority */\n  if (\n    ogObject.twitterImageSrc ||\n    ogObject.twitterImage ||\n    ogObject.twitterImageWidth ||\n    ogObject.twitterImageHeight ||\n    ogObject.twitterImageAlt\n  ) {\n    ogObject.twitterImage = ogObject.twitterImage ? ogObject.twitterImage : ogObject.twitterImageSrc\n    ogObject.twitterImage = ogObject.twitterImage ? ogObject.twitterImage : [null]\n    ogObject.twitterImageWidth = ogObject.twitterImageWidth ? ogObject.twitterImageWidth : [null]\n    ogObject.twitterImageHeight = ogObject.twitterImageHeight ? ogObject.twitterImageHeight : [null]\n    ogObject.twitterImageAlt = ogObject.twitterImageAlt ? ogObject.twitterImageAlt : [null]\n  }\n  var twitterImages = zip(\n    ogObject.twitterImage,\n    ogObject.twitterImageWidth,\n    ogObject.twitterImageHeight,\n    ogObject.twitterImageAlt\n  )\n    .map(mediaMapperTwitterImage)\n    .sort(mediaSorter)\n\n  /* Combine twitter player/width/height/stream\n      and sort for priority */\n  if (\n    ogObject.twitterPlayer ||\n    ogObject.twitterPlayerWidth ||\n    ogObject.twitterPlayerHeight ||\n    ogObject.twitterPlayerStream\n  ) {\n    ogObject.twitterPlayer = ogObject.twitterPlayer ? ogObject.twitterPlayer : [null]\n    ogObject.twitterPlayerWidth = ogObject.twitterPlayerWidth ? ogObject.twitterPlayerWidth : [null]\n    ogObject.twitterPlayerHeight = ogObject.twitterPlayerHeight\n      ? ogObject.twitterPlayerHeight\n      : [null]\n    ogObject.twitterPlayerStream = ogObject.twitterPlayerStream\n      ? ogObject.twitterPlayerStream\n      : [null]\n  }\n  var twitterPlayers = zip(\n    ogObject.twitterPlayer,\n    ogObject.twitterPlayerWidth,\n    ogObject.twitterPlayerHeight,\n    ogObject.twitterPlayerStream\n  )\n    .map(mediaMapperTwitterPlayer)\n    .sort(mediaSorter)\n\n  // Delete temporary fields\n  fieldsArray\n    .filter(function(item) {\n      return item.multiple\n    })\n    .forEach(function(item) {\n      delete ogObject[item.fieldName]\n    })\n\n  // Select the best image\n  if (ogImages.length) {\n    if (options.allMedia) {\n      ogObject.ogImage = ogImages\n    } else {\n      ogObject.ogImage = ogImages[0]\n    }\n  }\n\n  // Select the best video\n  if (ogVideos.length) {\n    if (options.allMedia) {\n      ogObject.ogVideo = ogVideos\n    } else {\n      ogObject.ogVideo = ogVideos[0]\n    }\n  }\n\n  // Select the best twitter image\n  if (twitterImages.length) {\n    if (options.allMedia) {\n      ogObject.twitterImage = twitterImages\n    } else {\n      ogObject.twitterImage = twitterImages[0]\n    }\n  }\n\n  // Select the best player\n  if (twitterPlayers.length) {\n    if (options.allMedia) {\n      ogObject.twitterPlayer = twitterPlayers\n    } else {\n      ogObject.twitterPlayer = twitterPlayers[0]\n    }\n  }\n\n  // Check for 'only get open graph info'\n  if (!options.onlyGetOpenGraphInfo) {\n    // Get title tag if og title was not provided\n    if (!ogObject.ogTitle && $('head > title').text() && $('head > title').text().length > 0) {\n      ogObject.ogTitle = $('head > title').text()\n    }\n    // Get meta description tag if og description was not provided\n    if (\n      !ogObject.ogDescription &&\n      $('head > meta[name=\"description\"]').attr('content') &&\n      $('head > meta[name=\"description\"]').attr('content').length > 0\n    ) {\n      ogObject.ogDescription = $('head > meta[name=\"description\"]').attr('content')\n    }\n    // Get first image as og:image if there is no og:image tag.\n    if (!ogObject.ogImage && ogImageFallback) {\n      var supportedImageExts = ['jpg', 'jpeg', 'png']\n      $('img').each(function(i, elem) {\n        if (\n          $(elem).attr('src') &&\n          $(elem).attr('src').length > 0 &&\n          supportedImageExts.indexOf(\n            $(elem)\n              .attr('src')\n              .split('.')\n              .pop()\n          ) !== -1\n        ) {\n          ogObject.ogImage = {\n            url: $(elem).attr('src')\n          }\n          return false\n        }\n      })\n    }\n  }\n\n  return ogObject\n}\n","import { isUrl } from 'utils/url'\n\nimport { MediaThumbnailSize, IMediaMiddleware, IMediaResponse } from '../types'\nimport { parse } from './og'\nimport { mergeMetadata } from '../utils'\n\n/** Bad video types to not use. */\nconst BAD_VIDEO_TYPES = new Set(['application/x-shockwave-flash'])\n\n/** Disable using opengraph videos on specific websites. */\nconst IGNORE_VIDEO_HOSTNAMES = new Set([\n  'www.netflix.com' // ignore series trailer\n])\n\nfunction buildHTMLMetadata(url: URL, body: string): Partial<IMediaResponse> {\n  const og = parse(body, {})\n  console.log('og', og)\n  const { ogTitle: title, ogImage: image, ogDescription: description } = og\n\n  const thumbnails = image\n    ? {\n        [MediaThumbnailSize.Default]: image.url\n      }\n    : undefined\n\n  const meta: Partial<IMediaResponse> = {\n    url: url.href!,\n    title,\n    thumbnails,\n    description\n  }\n\n  let useVideo = !IGNORE_VIDEO_HOSTNAMES.has(url.hostname)\n\n  if (useVideo && og.ogVideo) {\n    const type = og.ogVideo.type\n    const videoUrl = og.ogVideo.url\n\n    const hasValidType = type ? !BAD_VIDEO_TYPES.has(type) : true\n    useVideo = hasValidType && videoUrl && isUrl(videoUrl)\n\n    if (useVideo) meta.url = videoUrl\n    if (og.ogVideo.duration) meta.duration = og.ogVideo.duration * 1000\n  }\n\n  return meta\n}\n\nconst mware: IMediaMiddleware = {\n  match({ protocol }) {\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  async resolve(ctx, next) {\n    const { url } = ctx.req\n    const { $, body } = ctx.state\n\n    if ($ && body) {\n      const meta = buildHTMLMetadata(url, body)\n      mergeMetadata(ctx.res, meta)\n    }\n\n    return next()\n  }\n}\n\nexport default mware\n","import { load } from 'cheerio'\nimport { IMediaMiddleware } from '../types'\nimport { fetchText } from 'utils/http'\nimport { Url } from 'url'\nimport { MEDIA_USER_AGENT } from 'constants/http'\nimport { mergeMetadata } from '../utils'\n\nconst WORDPRESS_OEMBED_PATH = /\\/wp-json\\/oembed\\/.*?\\/embed/i\n\nasync function fetchOEmbed(url: string) {\n  const [json] = await fetchText(url, {\n    headers: {\n      'user-agent': MEDIA_USER_AGENT\n    }\n  })\n\n  return json as any\n}\n\nfunction parseOembedUrl(json: any) {\n  if (typeof json.html === 'string') {\n    // Decode html entities if needed\n    const html = json.html.startsWith('&lt;') ? load(json.html)('body').text() : json.html\n    const $ = load(html)\n    let src = $('iframe').attr('src')\n\n    if (src) {\n      return src.startsWith('//') ? `https:${src}` : src\n    }\n  }\n}\n\nconst mware: IMediaMiddleware = {\n  match({ protocol }) {\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  async resolve(ctx, next) {\n    if (typeof ctx.state.oEmbed === 'boolean' && !ctx.state.oEmbed) {\n      return next()\n    }\n\n    const { url } = ctx.req\n\n    let json\n\n    if (ctx.state.oEmbedJson) {\n      json = ctx.state.oEmbedJson\n    } else if (ctx.state.$) {\n      const { $ } = ctx.state\n      const link = $(`link[type='text/json+oembed'], link[type='application/json+oembed']`).attr(\n        'href'\n      )\n\n      if (\n        link &&\n        // Wordpress embeds are super generic\n        !WORDPRESS_OEMBED_PATH.test(link)\n      ) {\n        json = await fetchOEmbed(link)\n      }\n    }\n\n    if (json) {\n      console.info('oembed', json)\n      const src = parseOembedUrl(json)\n\n      const meta = {\n        url: src,\n        description: json.description\n      }\n\n      mergeMetadata(ctx.res, meta)\n    }\n\n    return next()\n  }\n}\n\nexport default mware\n","import { IMediaMiddleware } from '../types'\nimport { Url, parse, format } from 'url'\nimport { encodeQueryParams } from 'utils/url'\n\nconst setQueryTrue = (prop: string, query: any) => {\n  if (!!query[prop]) {\n    query[prop] = 'true'\n    return true\n  }\n}\n\n/** Set autoplay query param to true */\nconst setAutoplay = (url: string) => {\n  const urlObj = parse(url, true)\n  const { query } = urlObj\n\n  if (!(setQueryTrue('autoplay', query) || setQueryTrue('auto_play', query))) {\n    ;['autoplay', 'auto_play'].forEach(prop => {\n      query[prop] = 'true'\n    })\n  }\n\n  urlObj.search = encodeQueryParams(query)\n\n  return format(urlObj)\n}\n\nconst mware: IMediaMiddleware = {\n  match({ protocol, host }) {\n    // BUG: server returns Access Denied\n    if (host && host.indexOf('redd.it') > -1) {\n      return false\n    }\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  async resolve(ctx, next) {\n    const { url } = ctx.res\n\n    // TODO: use mime-type instead of extension\n    // need a way to compose httpHead/media mware after microdata changes url\n    const isMedia = url ? url.endsWith('mp4') : false\n\n    if (!isMedia) {\n      ctx.res.url = setAutoplay(url)\n    }\n\n    return next()\n  }\n}\n\nexport default mware\n","import { load } from 'cheerio'\n\nimport { IMediaMiddleware } from '../types'\nimport { parse, toSeconds } from 'iso8601-duration'\n\nconst mware: IMediaMiddleware = {\n  match({ protocol }) {\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  async resolve(ctx, next) {\n    const { url } = ctx.req\n    const { $ } = ctx.state\n\n    // TODO: clean this up and make it more robust\n    if ($) {\n      const noscript = $(`noscript`)\n\n      noscript.each(function(idx: number, elem: any) {\n        const node = ctx.state.$!(elem)\n        const text = node.text()\n\n        if (text.indexOf('schema.org') === -1) {\n          return\n        }\n\n        const $ = load(text)\n\n        const metaDuration = $(`meta[itemprop='duration']`).attr('content')\n        if (metaDuration) {\n          const duration = toSeconds(parse(metaDuration)) * 1000\n\n          if (duration && !isNaN(duration)) {\n            ctx.res.duration = duration\n          }\n        }\n      })\n    }\n\n    return next()\n  }\n}\n\nexport default mware\n","import { IMediaMiddleware } from '../types'\n\nconst mware: IMediaMiddleware = {\n  match(url) {\n    const { hostname = '' } = url\n    return hostname.endsWith('imgur.com')\n  },\n\n  async resolve(ctx, next) {\n    const { $ } = ctx.state\n\n    if ($) {\n      const title = $('title')\n        .text()\n        .trim()\n      const imageSrc = $('link[rel=image_src]').attr('href')\n      const isAlbum = title.endsWith('Album on Imgur')\n\n      if (!isAlbum && imageSrc) {\n        await next()\n        ctx.res.url = imageSrc\n        return ctx.res\n      }\n    }\n\n    return next()\n  }\n}\n\nexport default mware\n","export const enum MediaRequestErrorCode {\n  Generic,\n  NotAllowed,\n  InvalidContentType,\n  DownloadLink\n}\n\nexport class MediaRequestError extends Error {\n  constructor(public code: MediaRequestErrorCode) {\n    super(`Media Request Error (${code})`)\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, MediaRequestError.prototype)\n  }\n}\n","import { IMediaMiddleware } from '../types'\nimport { MediaRequestError, MediaRequestErrorCode } from 'media/error'\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\n */\nconst ALLOWED_CONTENT_TYPES = new Set([\n  'image/gif',\n  'text/html',\n  'image/jpeg',\n  'audio/mpeg',\n  'video/mpeg',\n  'audio/ogg',\n  'video/ogg',\n  'application/ogg',\n  'audio/opus',\n  'image/svg+xml',\n  'text/plain',\n  'audio/wav',\n  'audio/webm',\n  'video/webm',\n  'image/webp',\n  'application/xhtml+xml'\n])\n\nconst mware: IMediaMiddleware = {\n  match({ protocol }: URL) {\n    return protocol === 'http:' || protocol === 'https:'\n  },\n\n  async resolve(ctx, next) {\n    const { contentType, headResponseHeaders: headers } = ctx.state\n\n    if (headers) {\n      const contentDisp = headers['content-disposition']\n      if (typeof contentDisp === 'string' && contentDisp.startsWith('attachment')) {\n        throw new MediaRequestError(MediaRequestErrorCode.DownloadLink)\n      }\n    }\n\n    // TODO: Disallow any content types known to cause download\n    // if (contentType && !ALLOWED_CONTENT_TYPES.has(contentType)) {\n    //   throw new MediaRequestError(MediaRequestErrorCode.InvalidContentType)\n    // }\n\n    return next()\n  }\n}\n\nexport default mware\n","import { cleanObject } from 'utils/object'\nimport compose from './compose'\n\nimport { IMediaMiddleware, IMediaRequest, IMediaResponse, IMediaContext, MediaType } from './types'\n\nimport baseMware from './middleware/base'\nimport subredditMware from './middleware/subreddit'\nimport youTubeMware from './middleware/youtube'\nimport youTubePlaylistMware from './middleware/youtube-playlist'\nimport httpHeadMware from './middleware/httpHead'\nimport mediaMware from './middleware/media'\nimport htmlMware from './middleware/html'\nimport openGraphMware from './middleware/openGraph'\nimport oEmbedMware from './middleware/oembed'\nimport autoplayMware from './middleware/autoplay'\nimport microdataMware from './middleware/microdata'\nimport imgurMware from './middleware/imgur'\nimport preventDownloadMware from './middleware/preventDownload'\n\nimport { IMediaItem } from 'lobby/reducers/mediaPlayer'\n\n// prettier-ignore\nconst middlewares: IMediaMiddleware[] = [\n  baseMware,\n\n  subredditMware,\n  youTubePlaylistMware,\n\n  httpHeadMware,\n  preventDownloadMware,\n  mediaMware,\n  htmlMware,\n\n  youTubeMware,\n  imgurMware,\n\n  openGraphMware,\n  oEmbedMware,\n  microdataMware,\n  autoplayMware\n];\n\ntype MediaUrl = URL\n\nconst createContext = (url: MediaUrl) => {\n  const req: IMediaRequest = {\n    type: MediaType.Item,\n    url,\n\n    // TODO: add user info for logging middleware\n    user: null\n  }\n\n  const res: IMediaResponse = {\n    type: MediaType.Item,\n    url: url.href,\n    state: {}\n  }\n\n  const ctx: IMediaContext = {\n    req,\n    res,\n    state: {}\n  }\n\n  return ctx\n}\n\nconst finalizeMedia = (media: IMediaResponse) => {\n  if (media.description) {\n    const desc = media.description.trim()\n    media.description = desc || undefined\n  }\n  return cleanObject(media)\n}\n\nexport const resolveMediaUrl = async (url: string): Promise<Readonly<IMediaResponse> | null> => {\n  const urlObj: MediaUrl = new URL(url)\n  if (!urlObj.href) {\n    return null\n  }\n\n  const ctx = createContext(urlObj)\n\n  const fn = compose(middlewares)\n  const result = (await fn(ctx)) || ctx.res\n  console.debug('Resolved media', ctx)\n  return finalizeMedia(result)\n}\n\nexport const resolveMediaPlaylist = async (\n  media: IMediaItem\n): Promise<Readonly<IMediaResponse> | null> => {\n  const urlObj: MediaUrl = new URL(media.url)\n  if (!urlObj.href) {\n    return null\n  }\n\n  const ctx = createContext(urlObj)\n\n  // Transfer old state to new request\n  ctx.req = {\n    ...ctx.req,\n    type: media.type,\n    state: media.state\n  }\n\n  console.log('resolving playlist', ctx)\n\n  const fn = compose(middlewares)\n  const result = (await fn(ctx)) || ctx.res\n  return finalizeMedia(result)\n}\n"],"sourceRoot":""}